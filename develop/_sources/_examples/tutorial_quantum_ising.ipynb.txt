{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 1: Reconstruction of a positive wavefunction\n",
    "\n",
    "## Getting Started\n",
    "\n",
    "The following imports are needed to run this tutorial:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from qucumber.binary_rbm import BinaryRBM\n",
    "from qucumber.quantum_reconstruction import QuantumReconstruction\n",
    "from qucumber.positive_wavefunction import PositiveWavefunction\n",
    "\n",
    "from qucumber.callbacks import MetricEvaluator\n",
    "\n",
    "import qucumber.utils.training_statistics as ts\n",
    "import qucumber.utils.data as data\n",
    "\n",
    "import quantum_ising_chain\n",
    "from quantum_ising_chain import TFIMChainEnergy, TFIMChainMagnetization\n",
    "                                # for calculating observables after training. More later..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*BinaryRBM* contains generic properties of an RBM with a binary visible and hidden layer (e.g. functions for its effective energy and sampling the hidden and visible layers). \n",
    "\n",
    "The actual quantum wavefunction reconstruction occurs in the *QuantumReconstruction*. A *QuantumReconstruction* object is initialized with a neural network state (in this case, a *PositiveWavefunction* object).\n",
    "\n",
    "*callbacks* contains functions that allow the user to evaluate the quality of the training (i.e. based on the fidelity or KL divergence). *training_statistics* contains the utilities in order to calculate these training evaluators.\n",
    "\n",
    "_data_ contains functions that handle loading the training data.\n",
    "\n",
    "*quantum_ising_chain* is not a part of QuCumber; it comprises of classes and functions that will calculate the energy and magnetization of a transverse-field Ising model (TFIM). *quantum_ising_chain* inherits properties from the *Observables* class (part of QuCumber - see observables.py). We encourage users to follow a similar structure to *quantum_ising_chain* when calculating observables for other systems (i.e. not a TFIM).\n",
    "\n",
    "## Training\n",
    "\n",
    "Let's beging with training the RBM on a positive wavefunction. We consider the quantum Ising model with the Hamiltonian $H=-J\\sum_{\\langle i j \\rangle} S^z_i S^z_j - h \\sum_i S^x_i$\n",
    "at its quantum critical point $h/J=1$.  The training data has been generated and is contained in the file *tfim1d_N10_train_samples.txt*.  It contains 10,000 measurements of the $S^z$ states of 10 qubits, represented as zeros or ones.\n",
    "\n",
    "To evaluate how well the RBM is training, we compute the fidelity, $|\\langle \\psi|\\psi_{\\rm RBM} \\rangle|^2$, between the true wavefunction of the system and the wavefunction the RBM reconstructs. First, we need to load our training data and the true wavefunction of this system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_samples_path = 'tfim1d_train_samples.txt'\n",
    "psi_path           = 'tfim1d_psi.txt'\n",
    "\n",
    "train_samples,target_psi = data.load_data(train_samples_path,psi_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following arguments are required to construct a **PositiveWavefunction** neural network state:\n",
    "\n",
    "1. **The number of visible units**. This is 10 for the case of our dataset.\n",
    "2. **The number of hidden units in the hidden layer of the RBM**. This number is set to the number of visible units by default (10 in the case of our dataset).\n",
    "\n",
    "One may also choose to run this tutorial on a GPU by adding in \"gpu = True\" as an argument to **PositiveWavefunction**. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "nv = train_samples.shape[-1]\n",
    "nh = nv\n",
    "\n",
    "nn_state = PositiveWavefunction(num_visible=nv,num_hidden=nh,gpu=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can specify the parameters of the training process:\n",
    "\n",
    "1. **epochs**: the number of epochs, i.e. training cycles that will be performed.\n",
    "2. **batch_size**: the number of data points used in the positive phase of the gradient.\n",
    "3. **num_chains**: the number of data points used in the negative phase of the gradient. Keeping this larger than the *batch_size* is preferred.\n",
    "4. **CD**: the number of contrastive divergence steps.\n",
    "5. **lr**: the learning rate.\n",
    "6. **log_every**: how often you would like the program to update you during the training; say we choose 50 - that is, every 50 epochs the program will print out the fidelity. This parameter is required in the *MetricEvaluator*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "epochs     = 1000\n",
    "batch_size = 100\n",
    "num_chains = 200\n",
    "CD         = 1\n",
    "lr         = 0.01\n",
    "log_every  = 50"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we initialize the parameters of the **PositiveWavefunction** and the **MetricEvaluator**, we can begin training. Our **QuantumReconstruction** object, *qr* (see below), contains a function called *fit* that executes the training process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "nn_state.space = nn_state.generate_hilbert_space(nv) # generate the entire visible space of the system.\n",
    "callbacks = [MetricEvaluator(log_every,{'Fidelity':ts.fidelity,'KL':ts.KL},target_psi=target_psi,verbose=True)]\n",
    "\n",
    "qr = QuantumReconstruction(nn_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 50\tFidelity = 0.767887\tKL = 0.485577\n",
      "Epoch: 100\tFidelity = 0.893158\tKL = 0.215286\n",
      "Epoch: 150\tFidelity = 0.933112\tKL = 0.133240\n",
      "Epoch: 200\tFidelity = 0.951982\tKL = 0.095229\n",
      "Epoch: 250\tFidelity = 0.963166\tKL = 0.073720\n",
      "Epoch: 300\tFidelity = 0.971290\tKL = 0.057401\n",
      "Epoch: 350\tFidelity = 0.978749\tKL = 0.042217\n",
      "Epoch: 400\tFidelity = 0.983113\tKL = 0.033582\n",
      "Epoch: 450\tFidelity = 0.984745\tKL = 0.030462\n",
      "Epoch: 500\tFidelity = 0.987014\tKL = 0.026170\n",
      "Epoch: 550\tFidelity = 0.986679\tKL = 0.026969\n",
      "Epoch: 600\tFidelity = 0.989077\tKL = 0.022077\n",
      "Epoch: 650\tFidelity = 0.990116\tKL = 0.019953\n",
      "Epoch: 700\tFidelity = 0.991193\tKL = 0.017820\n",
      "Epoch: 750\tFidelity = 0.991269\tKL = 0.017701\n",
      "Epoch: 800\tFidelity = 0.992030\tKL = 0.016018\n",
      "Epoch: 850\tFidelity = 0.992405\tKL = 0.015375\n",
      "Epoch: 900\tFidelity = 0.993283\tKL = 0.013571\n",
      "Epoch: 950\tFidelity = 0.993099\tKL = 0.013807\n",
      "Epoch: 1000\tFidelity = 0.992369\tKL = 0.015432\n",
      "\n",
      "Elapsed time = 120.11\n"
     ]
    }
   ],
   "source": [
    "nn_state.initialize_parameters() # randomize the network parameters.\n",
    "qr.fit(train_samples, epochs, batch_size, num_chains, CD, lr, progbar=False, callbacks=callbacks)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## After Training \n",
    "\n",
    "After training the RBM, the *fit* function will have stored the trained weights and biases. Now, we can generate samples from the trained RBM and calculate physical observables.\n",
    "\n",
    "We have created an example python file called *quantum_ising_chain.py* that calculates the energy and magnetization of a TFIM.\n",
    "\n",
    "*quantum_ising_chain* comprises of two classes: one to calculate the energy of a TFIM (**TFIMChainEnergy**) and one to calculate the magnetization of a TFIM (**TFIMChainMagnetization**). The following arguments are required to instatiate those objects.\n",
    "\n",
    "1. **h**: This is the *h/J* value of the TFIM (1 in the case of our dataset). This is only needed in **TFIMChainEnergy**.\n",
    "2. **n_samples**: The number of samples to be generated from the trained RBM. These samples will be used to calculate the observables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "h         = 1\n",
    "n_samples = 5000\n",
    "\n",
    "tfim_energy = TFIMChainEnergy(h, n_samples)\n",
    "tfim_sZ     = TFIMChainMagnetization(n_samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As stated previously, the **TFIMChainEnergy** and **TFIMChainMagnetization** classes inherit properties from **Observables**. To go ahead and calculate the energy and magnetization along with their respective standard errors, we call the *statistics* function in **Observables**, which requires the neural network state (in this case, **PositiveWavefunction**) and the number of samples that are to be generated. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean energy:  -1.2340281103312307  +/-  0.000680200593243931\n",
      "Mean magnetization:  0.5496800000000001  +/-  0.004397436413343785\n"
     ]
    }
   ],
   "source": [
    "energy_stats = tfim_energy.statistics(nn_state, n_samples)\n",
    "sZ_stats     = tfim_sZ.statistics(nn_state, n_samples)\n",
    "\n",
    "print('Mean energy: ',energy_stats['mean'],' +/- ',energy_stats['std_error'])\n",
    "print('Mean magnetization: ',sZ_stats['mean'],' +/- ',sZ_stats['std_error'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The exact value for the energy is -1.2381, and for the magnetization is 0.5610. To see the how quickly the energy and magnetization converge as a function of the sampling step, *n_eq*, the code below will do the trick."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Magnetization')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_eq = 200\n",
    "dict_observables = quantum_ising_chain.Convergence(nn_state, tfim_energy, tfim_sZ, n_samples, n_eq)\n",
    "\n",
    "energy     = dict_observables['energy']['energies']\n",
    "err_energy = dict_observables['energy']['error']\n",
    "\n",
    "sZ     = dict_observables['sigmaZ']['sZ']\n",
    "err_sZ = dict_observables['sigmaZ']['error']\n",
    "\n",
    "step = list(range(n_eq+1))\n",
    "\n",
    "plt.figure(1)\n",
    "ax1 = plt.axes()\n",
    "ax1.plot(step, energy, color='red')\n",
    "ax1.axhline(-1.2381, color='black')\n",
    "ax1.fill_between(step, energy-err_energy, energy+err_energy, color='red', alpha=0.4) \n",
    "ax1.grid()\n",
    "ax1.set_xlim(0,n_eq)\n",
    "ax1.set_ylim(-1.26,-1.22)\n",
    "ax1.set_xlabel('CD Step')\n",
    "ax1.set_ylabel('Energy')\n",
    "\n",
    "plt.figure(2)\n",
    "ax2 = plt.axes()\n",
    "ax2.plot(step, sZ, color='red')\n",
    "ax2.axhline(0.5610, color='black')\n",
    "ax2.fill_between(step, sZ-err_sZ, sZ+err_sZ, color='red', alpha=0.4) \n",
    "ax2.grid()\n",
    "ax2.set_xlim(0,n_eq)\n",
    "ax2.set_xlabel('CD Step')\n",
    "ax2.set_ylabel('Magnetization')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can see a brief transient period in each observable, before the state of the machine \"warms up\" to equilibrium.  After that, the values fluctuate around the mean."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
